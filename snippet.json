{
    "1": {
        "prefix": "cpp",
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "",
            "int main()",
            "{",
            "",
            "    cout << \"Hello c++\";",
            "    $0",
            "    return 0;",
            "}"
        ],
        "description": ""
    },
    "2": {
        "prefix": "node",
        "body": [
            "class Node",
            "{",
            "public:",
            "    int val;",
            "    Node *next;",
            "",
            "    Node(int val)",
            "    {",
            "        this->val = val;",
            "        this->next = NULL;",
            "    }",
            "};"
        ],
        "description": ""
    },
    "3": {
        "prefix": "d_node",
        "body": [
            "",
            "",
            "class Node",
            "{",
            "public:",
            "    int val;",
            "    Node *prev;",
            "    Node *next;",
            "",
            "    Node(int val)",
            "    {",
            "        this->val = val;",
            "        this->prev = NULL;",
            "        this->next = NULL;",
            "    }",
            "};"
        ],
        "description": ""
    },
    "4": {
        "prefix": "bt_node",
        "body": [
            "class Node",
            "{",
            "public:",
            "    int val;",
            "    Node *left;",
            "    Node *right;",
            "",
            "    Node(int val)",
            "    {",
            "        this->val = val;",
            "        this->left = NULL;",
            "        this->right = NULL;",
            "    }",
            "};"
        ],
        "description": ""
    },
    "5": {
        "prefix": "cbt",
        "body": [
            "Node *createBinaryTree()",
            "{",
            "    int val;",
            "    cin >> val;",
            "",
            "    if (val == -1)",
            "    {",
            "        return NULL;",
            "    }",
            "    Node *root = new Node(val);",
            "    queue<Node *> q;",
            "    q.push(root);",
            "",
            "    while (!q.empty())",
            "    {",
            "        Node *curr = q.front();",
            "        q.pop();",
            "",
            "        int l, r;",
            "        cin >> l >> r;",
            "        if (l != -1)",
            "        {",
            "            curr->left = new Node(l);",
            "            q.push(curr->left);",
            "        }",
            "        if (r != -1)",
            "        {",
            "            curr->right = new Node(r);",
            "            q.push(curr->right);",
            "        }",
            "    }",
            "    return root;",
            "}"
        ],
        "description": ""
    }
}